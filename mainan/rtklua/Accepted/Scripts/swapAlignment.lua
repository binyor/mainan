function Player.swapAlignment(player, newAlignment)
	--local spellYNames = player:getSpellYName()  -- this returns currently learned spell yname list
	if newAlignment == nil then
		return
	end

	local NA = -1

	if type(newAlignment) == "string" then
		if string.lower(newAlignment) == "unaligned" or string.lower(newAlignment) == "base" then
			NA = 0
		end
		if string.lower(newAlignment) == "kwisin" or string.lower(newAlignment) == "kwi-sin" then
			NA = 1
		end
		if string.lower(newAlignment) == "mingken" or string.lower(newAlignment) == "ming-ken" then
			NA = 2
		end
		if string.lower(newAlignment) == "ohaeng" or string.lower(newAlignment) == "ohaeng" then
			NA = 3
		end
	else
		NA = newAlignment
	end

	if NA < 0 or NA > 3 then
		return
	end

	local OldAlign = {}
	local NewAlign = {}
	local OA = player.alignment
	local PC = player.baseClass

	local classes = {"_warrior", "_rogue", "_mage", "_poet"}

	local baseSpells = {
		"taunt",
		"wolfs_fury",
		"bless",
		"fleshspeak",
		"backstab",
		"flank",
		"tigers_fury",
		"enchant",
		"relief",
		"potence",
		"watchful_eye",
		"dragons_fury",
		"infuse",
		"ingress",
		"berserk",
		"vigor",
		"whirlwind",
		"hoche",
		"salvation",
		"assault",
		"hunangs_relief",
		"feral",
		"might",
		"judge",
		"singe",
		"mend_wounds",
		"ignite",
		"shadow_figure",
		"rodent",
		"spy",
		"gangrel",
		"invisible",
		"ambush",
		"beast",
		"amnesia",
		"recover",
		"desperate_attack",
		"filch",
		"drain",
		"seal_wounds",
		"lethal_strike",
		"maros_remedy",
		"masos_remedy",
		"race",
		"refresh",
		"bladestorm",
		"chance",
		"daggers_remedy",
		"swift_recovery",
		"harden_armor",
		"lay_hands",
		"erupt",
		"valor",
		"ion",
		"purge",
		"ion_charge",
		"recover",
		"cure_paralysis",
		"sanctuary",
		"invoke",
		"heal",
		"impact",
		"explode",
		"remove_curse",
		"call_lightning",
		"vex",
		"venom",
		"blind",
		"paralyze",
		"electrocute",
		"confuse",
		"sleep",
		"stormstrike",
		"doze",
		"tempest",
		"rejuvenate",
		"hellfire",
		"solace",
		"bekyuns_heal",
		"inferno",
		"vital_spark",
		"anoint",
		"remove_veil",
		"endear",
		"revitalize",
		"inspiration",
		"remedy",
		"atone",
		"fortify",
		"second_sight",
		"retribution",
		"barrier",
		"inspire",
		"scourge",
		"earthquake",
		"blockade_human",
		"heavens_kiss",
		"harden_body",
		"dispell",
		"flare",
		"water_of_life",
		"resurrect",
		"stream_of_life",
		"bolster",
		"dishearten",
		"essence_of_life",
		"spark",
		"cotw_caterpillar",
		"cotw_fluffy_dog",
		"cotw_panda_bear",
		"cotw_wild_monkey",
		"cotw_gorilla",
		"cotw_wind_dancer",
		"cotw_wind_warrior"
	}

	local kwisinSpells = {
		"anger",
		"souls_rage",
		"sanctification",
		"spiritsong",
		"back_battle",
		"flank_battle",
		"filling_the_soul",
		"spiritual_aid",
		"renew_essence",
		"spirit_arm",
		"spirits_whisper",
		"strength_of_ancestors",
		"tincture_of_the_unknown",
		"hand_of_darkness",
		"no_fear",
		"touch_of_health",
		"deaths_angel",
		"immunity",
		"redemption",
		"deaths_challenge",
		"from_the_brink",
		"kwisin_cloak",
		"spirit_strength",
		"spiritual_advisor",
		"embrace_of_the_void",
		"spiritual_cure",
		"spirit_strike",
		"spirit_warrior",
		"kwisin_disguise",
		"spiritual_guide",
		"kwisin_mask",
		"spirits_form",
		"displacement",
		"kwisin_chameleon",
		"forgetfulness",
		"spirits_embrace",
		"the_voids_measure",
		"spirits_hand",
		"drink_of_souls",
		"spirit_caress",
		"afterlifes_embrace",
		"kwisin_maros_remedy",
		"kwisin_masos_remedy",
		"spiritual_jump",
		"souls_awakening",
		"swords_dance",
		"randomness",
		"kwisin_daggers_remedy",
		"renew_energy",
		"thicken_skin",
		"spirits_smile",
		"soulstorm",
		"strengthen",
		"soul_strike",
		"cure_illness",
		"crescendo",
		"spirits_embrace",
		"release_binds",
		"protect_soul",
		"spirits_power",
		"ancestors_touch",
		"soul_spike",
		"soul_chasm",
		"release_curse",
		"death_scream",
		"deaths_face",
		"spirits_leech",
		"dark_veil",
		"spirit_leash",
		"eater_of_the_dead",
		"curse_of_the_void",
		"sweet_musings",
		"river_of_blood",
		"voids_touch",
		"dance_macabre",
		"still_embrace",
		"consume_soul",
		"festival_of_souls",
		"death_denied",
		"deaths_door",
		"spirits_kiss",
		"brothers_of_spirit",
		"clear_darkness",
		"possess_soul",
		"ancestors_embrace",
		"draw_energy",
		"brethren_of_spirits",
		"restore_will",
		"ancestors_kiss",
		"hear_spirits",
		"spirit_puppet",
		"spirit_barrier",
		"share_energy",
		"damage_will",
		"tossing_the_bones",
		"block_entry",
		"clan_of_souls",
		"deaths_guard",
		"remove_magic",
		"dance_of_death",
		"breath_of_power",
		"return_spirit",
		"purity_of_spirit",
		"dark_armor",
		"dark_fear",
		"essence_of_spirit",
		"glimpse_of_the_void",
		"kwisin_companion",
		"kwisin_assistant",
		"kwisin_protector",
		"kwisin_fighter",
		"kwisin_warrior",
		"kwisin_champion",
		"kwisin_avatar"
	}

	local mingkenSpells = {
		"tease",
		"spirit_of_the_forest",
		"tribal_gathering",
		"helping_hand",
		"back_attack",
		"flank_attack",
		"spirit_of_the_wild",
		"oneness",
		"lifesong",
		"touch_of_the_bear",
		"creatures_guidance",
		"spirit_of_the_dragon",
		"tigers_claw",
		"dragons_claw",
		"tigers_pounce",
		"balm",
		"natures_own",
		"forest_blessing",
		"ointment_of_light",
		"cold_snap",
		"natures_slave",
		"mingken_cloak",
		"inner_blessing",
		"natural_talent",
		"lightning",
		"natures_kiss",
		"wrath_of_nature",
		"natural_defense",
		"mingken_disguise",
		"natures_handiwork",
		"mingken_mask",
		"lifes_cloak",
		"waylay",
		"mingken_chameleon",
		"free_spirit",
		"infuse_energy",
		"beastly_frenzy",
		"quick_fingers",
		"parasite",
		"heal_injury",
		"mingkens_judgement",
		"mingken_maros_remedy",
		"mingken_masos_remedy",
		"leap_of_faith",
		"healing_waters",
		"tigers_ambush",
		"natures_choice",
		"mingken_daggers_remedy",
		"loving_dew",
		"shield_of_life",
		"lifes_water",
		"avalanche",
		"bless_muscles",
		"tree_dart",
		"restore_health",
		"flight_of_arrows",
		"infuse_energy",
		"return_movement",
		"guard_life",
		"life_force",
		"life_flow",
		"treefall",
		"winters_vortex",
		"undo_evil",
		"natures_wounding",
		"unnatural_selection",
		"snake_bite",
		"winters_shadow",
		"cold_binds",
		"forests_discord",
		"despise_friend",
		"essence_of_poppies",
		"natural_disaster",
		"still_ethers",
		"wilding",
		"infuse_life",
		"flesh_eaters",
		"natures_bounty",
		"one_with_life",
		"natures_denial",
		"spark_of_health",
		"gathering_of_power",
		"restore_sight",
		"charm_life",
		"lifeforce",
		"harness_power",
		"gathering_of_the_flock",
		"raise_guard",
		"fertile_soil",
		"improve_sight",
		"palm_of_life",
		"life_barrier",
		"bestow_power",
		"drop_guard",
		"natures_fury",
		"distance_self",
		"healing_hand",
		"lifes_protection",
		"return_natural",
		"breaking_of_the_world",
		"healing_breath",
		"mingken_blessing",
		"natures_abundance",
		"life_armor",
		"break_will",
		"lifes_embrace",
		"bolt",
		"kwisin_companion",
		"mingken_assistant",
		"mingken_protector",
		"mingken_fighter",
		"mingken_warrior",
		"mingken_champion",
		"mingken_avatar"
	}

	local ohaengSpells = {
		"mock",
		"augmentation",
		"strength_of_purpose",
		"heal_others",
		"back_damage",
		"flank_damage",
		"ohaengs_grace",
		"strengthen_weapon",
		"sweet_waters",
		"sharpen",
		"spot_unbalance",
		"ohaengs_anger",
		"whetstone",
		"razors_edge",
		"winds_blast",
		"restoration",
		"bladedance",
		"magics_shield",
		"return_of_life",
		"volley",
		"lifes_essence",
		"ohaeng_cloak",
		"temper",
		"appraise",
		"natures_storm",
		"cooling_touch",
		"thunderclap",
		"ohaengs_armor",
		"ohaeng_disguise",
		"judgement_day",
		"ohaeng_mask",
		"glass_form",
		"reflect",
		"ohaeng_chameleon",
		"mislead",
		"lifes_river",
		"tilting_the_balance",
		"light_touch",
		"absorb",
		"bandage",
		"calculating_blow",
		"ohaeng_maros_remedy",
		"ohaeng_masos_remedy",
		"transport",
		"fire_dance",
		"cutting_edge",
		"trial_by_fire",
		"ohaeng_daggers_remedy",
		"invigorate",
		"elemental_armor",
		"quicken",
		"deluge",
		"power_burst",
		"sunstroke",
		"remove_poison",
		"blazing_sands",
		"lifes_river",
		"free_movement",
		"magic_shield",
		"gather_magic",
		"infuse_lifeforce",
		"shatter",
		"volcano",
		"restore_armor",
		"rain_of_fire",
		"flaw",
		"corruption",
		"ice_glare",
		"lockup",
		"shatter_storm",
		"chaos_rain",
		"stillness",
		"winds_of_disaster",
		"still_waters",
		"chain_lightning",
		"healing_rain",
		"hurricane",
		"ohaengs_blessing",
		"balanced_touch",
		"steel_storm",
		"water_of_nature",
		"natures_family",
		"purge_darkness",
		"align_follower",
		"lifespring",
		"combine_focus",
		"gathering_of_majesty",
		"align_armor",
		"waters_of_purity",
		"show_hidden",
		"tornado",
		"balance_barrier",
		"release_focus",
		"unalign_armor",
		"groundstrike",
		"protect_sides",
		"earths_embrace",
		"body_of_alignment",
		"restore_balance",
		"storm_crow",
		"breath_of_life",
		"death_undone",
		"forge_of_life",
		"armor_of_elements",
		"harshen_attack",
		"earths_cradle",
		"natures_ire",
		"ohaeng_companion",
		"ohaeng_assistant",
		"ohaeng_protector",
		"ohaeng_fighter",
		"ohaeng_warrior",
		"ohaeng_champion",
		"ohaeng_avatar"
	}

	if (OA == 0) then
		OldAlign = baseSpells
	end
	if (OA == 1) then
		OldAlign = kwisinSpells
	end
	if (OA == 2) then
		OldAlign = mingkenSpells
	end
	if (OA == 3) then
		OldAlign = ohaengSpells
	end

	if (NA == 0) then
		NewAlign = baseSpells
	end
	if (NA == 1) then
		NewAlign = kwisinSpells
	end
	if (NA == 2) then
		NewAlign = mingkenSpells
	end
	if (NA == 3) then
		NewAlign = ohaengSpells
	end

	for i = 1, #OldAlign do
		--Player(25):talk(0, ""..baseSpells[i].." "..kwisinSpells[i].." "..mingkenSpells[i].." "..ohaengSpells[i]..".")

		if player:hasSpell(OldAlign[i] .. classes[PC]) then
			player:removeSpell(OldAlign[i] .. classes[PC])
			player:addSpell(NewAlign[i] .. classes[PC])
		end
	end

	local alignments = {"kwisin", "mingken", "ohaeng"}

	for i = 1, #alignments do
		for j = 1, #classes do
			--player:talk(0,""..alignments[i]..classes[j].."_since")
			if player:hasLegend(alignments[i] .. classes[j] .. "_since") then
				player:removeLegendbyName(alignments[i] .. classes[j] .. "_since")
			end
		end
	end

	if NA ~= 0 then
		local alignment = {"Kwi-Sin", "Ming-Ken", "Ohaeng"}
		local class = {"Warrior", "Rogue", "Mage", "Poet"}

		player:addLegend(
			alignment[NA] .. " " .. class[player.baseClass] .. " since (" .. curT() .. ")",
			alignments[NA] .. classes[player.baseClass] .. "_since",
			player.baseClass,
			128
		)
	end

	player.alignment = NA
end
